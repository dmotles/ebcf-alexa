# vim: ft=yaml
AWSTemplateFormatVersion: 2010-09-09

Description: >
  Main infrastructure pipeline for ebcf-alexa

Parameters:
  GitHubUser:
    Type: String
    Default: 'dmotles'
  GitHubRepo:
    Type: String
    Default: 'ebcf-alexa'
  GitHubBranch:
    Type: String
    Default: 'master'
  GitHubOAuthToken:
    Type: String
    NoEcho: true
  EnvName:
    Type: String
    Default: test
  CodePipelineSNSTopic:
    Type: String

Resources:
  ##
  # CODE PIPELINE DEFINITION
  ##
  CODEPIPELINE:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      ArtifactStore:
          Location: !Ref ArtifactBucket
          Type: S3
      RoleArn: !GetAtt [CodePipelineRole, Arn]
      Stages:
        - Name: SourceStage
          Actions:
            # 1. Get source from github
            - Name: GitHub
              RunOrder: '1'
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubOAuthToken
              OutputArtifacts:
                - Name: GitHubSrc

        - Name: BuildStage
          Actions:
            # 2. build an unit test the code.
            - Name: BuildAndUnitTest
              RunOrder: '2'
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref CodeBuildEBCFAlexa
              InputArtifacts:
                  - Name: GitHubSrc
              OutputArtifacts:
                  - Name: BuildArtifact

        - Name: TestStage
          Actions:
            # 3. deploy a test version of the lambda function.
            # XXX: eventually we'll want to run integ tests here.
            - Name: CreateTestStack
              RunOrder: '1'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              InputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ActionMode: REPLACE_ON_FAILURE
                StackName: !Sub '${EnvName}-TestStage-ebcf-alexa-lambda'
                Capabilities: CAPABILITY_IAM
                TemplatePath: 'BuildArtifact::ebcf-alexa-lambda.template.yml'
                TemplateConfiguration: 'BuildArtifact::ebcf-alexa-lambda.config.test.json'
                RoleArn: !GetAtt [CFNLambdaRole, Arn]
                ParameterOverrides: |
                      {
                          "LambdaS3Bucket": {
                              "Fn::GetArtifactAtt": [
                                  "BuildArtifact", "BucketName"
                                ]
                            },
                          "LambdaS3Key": {
                              "Fn::GetArtifactAtt": [
                                  "BuildArtifact", "ObjectKey"
                                ]
                            }
                        }
              Name: Deploy

            # 4. Manual approval for now.
            - Name: ApproveTestStack
              RunOrder: '2'
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                NotificationArn: !Ref CodePipelineSNSTopic
                CustomData: !Sub |
                  Do you want to create a change set against the production stack and delete
                  the ${EnvName}-TestStage-ebcf-alexa-lambda stack?
            # 5. Delete after approval.
            - Name: DeleteTestStack
              RunOrder: '3'
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: '1'
              Configuration:
                ActionMode: DELETE_ONLY
                RoleArn: !GetAtt [CFNLambdaRole, Arn]
                StackName: !Sub '${EnvName}-TestStage-ebcf-alexa-lambda'


  CodeBuildEBCFAlexa:
    Type: 'AWS::CodeBuild::Project'
    Properties:
        Artifacts:
            Type: CODEPIPELINE
        Description: 'Codebuild for ebcf-alexa'
        Name: !Sub '${EnvName}-build-ebcf-alexa'
        ServiceRole: !GetAtt [CodeBuilderRole, Arn]
        Source:
            Type: CODEPIPELINE
        Environment:
            Type: LINUX_CONTAINER
            Image: !Sub '${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/ebcf-alexa:latest'
            ComputeType: BUILD_GENERAL1_SMALL

  ArtifactBucket:
    Type: 'AWS::S3::Bucket'

##
# IAM ROLES
##

  CodeBuilderRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
        Version: 2012-10-17
      Path: /ebcf-alexa/
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                Effect: Allow
                Resource:
                  - !Sub '${ArtifactBucket.Arn}/*'
              - Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Effect: Allow
                Resource:
                  - !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/${EnvName}-build-ebcf-alexa'
                  - !Sub 'arn:aws:logs:us-east-1:${AWS::AccountId}:log-group:/aws/codebuild/${EnvName}-build-ebcf-alexa:*'
              - Action:
                  - 'cloudformation:ValidateTemplate'
                Effect: Allow
                Resource: '*'

  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
        Version: 2012-10-17
      Path: /ebcf-alexa/
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 's3:*'
                  - 'cloudformation:CreateStack'
                  - 'cloudformation:DescribeStacks'
                  - 'cloudformation:DeleteStack'
                  - 'cloudformation:UpdateStack'
                  - 'cloudformation:CreateChangeSet'
                  - 'cloudformation:ExecuteChangeSet'
                  - 'cloudformation:DeleteChangeSet'
                  - 'cloudformation:DescribeChangeSet'
                  - 'cloudformation:SetStackPolicy'
                  - 'iam:PassRole'
                  - 'sns:Publish'
                Effect: Allow
                Resource: '*'
              - Action:  # For CodeBuild actions
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuilds'
                Effect: Allow
                Resource: '*'

  CFNLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - cloudformation.amazonaws.com
        Version: 2012-10-17
      Path: /ebcf-alexa/
      Policies:
        - PolicyName: CFNLambdaRolePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Action:
                  - 'iam:*'
                  - 'lambda:*'
                Effect: Allow
                Resource: '*'
              - Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Effect: Allow
                Resource:
                  - !Sub '${ArtifactBucket.Arn}/*'
